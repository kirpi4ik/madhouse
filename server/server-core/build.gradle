buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:views-gradle:2.0.0.BUILD-SNAPSHOT"
        classpath "org.grails.plugins:hibernate5:7.0.0"
        classpath 'org.grails.plugins:quartz:2.0.13'
    }
}

apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "org.grails.grails-gsp"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://oss.jfrog.org/repo/" }
    maven {
        url "http://nexus.devexpert.eu/repository/maven"
        credentials {
            username = 'docker'
            if (file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").exists()) {
                password = file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").text
            } else {
                password = "${System.env.NEXUS_DEVEXPERT_EU_PASSWORD}"
            }
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile project(':server-rules')
    compile project(':server-grails')
    compile 'io.micrometer:micrometer-core:latest.release'
    compile 'io.micrometer:micrometer-registry-prometheus:latest.release'

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:spring-security-rest:3.0.1"
    compile 'org.grails.plugins:spring-security-oauth2-provider:4.0.0-RC1'
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:gsp"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.20.Final"

    /*compile "com.graphql-java:graphql-java:13.0"*/
    compile "org.grails.plugins:gorm-graphql-plugin:2.0.2.BUILD-SNAPSHOT"


    compile 'org.grails.plugins:quartz:2.0.13'
    compile 'org.quartz-scheduler:quartz:2.3.2' // Is not pulled in by default?

    compile 'org.grails.plugins:external-config:2.0.0'

    //cache
    compile group: 'com.hazelcast', name: 'hazelcast', version: '3.12.5'
    compile group: 'com.hazelcast', name: 'hazelcast-spring', version: '3.12.5'

    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:vue"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"

    runtime "com.h2database:h2"
    compile 'org.postgresql:postgresql:42.2.20'

    compile "org.grails.plugins:spring-security-rest:3.0.0.RC1"
    compile group: 'org.kohsuke', name: 'groovy-sandbox', version: '1.18'
    compile 'org.jsoup:jsoup:1.11.2'


    //ONVIF
    compile group: 'be.teletask.onvif', name: 'onvif', version: '1.0.2'
    //opsgenie atlassian
    compile "com.opsgenie.integration:sdk:2+"
    //LogBack kibana integration
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-access', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.2'

    compile 'org.grails.plugins:grails-spring-websocket:2.5.0.RC1'

    implementation "org.springframework.security:spring-security-config"
    /*implementation "org.springframework.security:spring-security-oauth2-authorization-server"*/
    implementation "org.springframework.security:spring-security-messaging"
    implementation "org.springframework.security:spring-security-web"

    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.0"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "io.micronaut:micronaut-http-client"
    testCompile "org.grails:grails-web-testing-support"
}
bootRun {
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

bootJar {
    rootSpec.filesMatching('**/*.jar', { jar ->
        String groupId = jar.file.parentFile.parentFile.parentFile.parentFile.name
        jar.name = "$groupId-${jar.name}"
    })
    archiveFileName = "madhouse-${project.version}.jar"
}