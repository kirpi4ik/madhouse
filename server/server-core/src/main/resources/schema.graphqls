type Query{
    navigation : Navigation
    userRolesForUser(userId: String!): [UserRole]
    cache(cacheName: String!, cacheKey: String!): CacheResult
    cacheAll(cacheName: String): [CacheResult]
    config(key: String!): String
    deviceModelList:[String!]!
}

type CacheResult {
    cacheName: String!
    cacheKey: String!
    cachedValue: String
}

type UserRole {
    userId: ID!
    roleId: ID!
}

type Navigation {
    breadcrumb(type: String!, id: String!) : [BradCrumbLink]
}

type MutationResponse {
    success : Boolean
    error : String
}

type BradCrumbLink {
    name : String
    type : String
    id : String
}
type Mutation {
    pushEvent(input:EventDatInput) : EventDataResponse
    cacheDelete(cacheName:String!, cacheKey:String!) : MutationResponse
    userRolesSave(input: SaveUserRoles): MutationResponse
}

type EventDataResponse {
    id: ID
    p0: String
    p1: String
    p2: String
    p3: String
    p4: String
    p5: String
    p6: String
    uid: String
}

input EventDatInput {
    p0: String
    p1: String
    p2: String
    p3: String
    p4: String
    p5: String
    p6: String
}

input SaveUserRoles {
    userId: String!
    userRoles: [UserRoleRef]
}
input UserRoleRef {
    userId : ID!
    roleId: ID!
}