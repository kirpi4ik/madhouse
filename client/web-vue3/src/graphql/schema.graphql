type BradCrumbLink {
  name: String
  type: String
  id: String
}

"""
Built-in Byte Array
"""
scalar ByteArray

type Cable {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  rack: Rack
  patchPanel: PatchPanel
  category: CableCategory
  code: String
  codeNew: String
  codeOld: String
  description: String
  patchPanelPort: String
  nrWires: Int
  peripherals: [DevicePeripheral]
  connectedTo: [DevicePort]
  zones: [Zone]
  maxAmp: Float

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

type CableCategory {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  cables: [Cable]
  name: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input CableCategoryCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  cables: [CableCreateNested!]
  name: String!
}

input CableCategoryCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  cables: [CableCreateNested]
  name: String
}

input CableCategoryUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  cables: [CableUpdateNested]
  name: String
}

input CableCategoryUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  cables: [CableUpdateNested]
  name: String
}

input CableCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  rack: RackCreateNested
  patchPanel: PatchPanelCreateNested
  category: CableCategoryCreateNested
  code: String
  codeNew: String
  codeOld: String
  description: String
  patchPanelPort: String
  nrWires: Int!
  peripherals: [DevicePeripheralCreateNested!]
  connectedTo: [DevicePortCreateNested!]
  zones: [ZoneCreateNested!]
  maxAmp: Float
}

input CableCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  codeNew: String
  codeOld: String
  description: String
  patchPanelPort: String
  nrWires: Int
  peripherals: [DevicePeripheralCreateNested]
  maxAmp: Float
}

input CableUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  rack: RackUpdateNested
  patchPanel: PatchPanelUpdateNested
  category: CableCategoryUpdateNested
  code: String
  codeNew: String
  codeOld: String
  description: String
  patchPanelPort: String
  nrWires: Int
  peripherals: [DevicePeripheralUpdateNested]
  connectedTo: [DevicePortUpdateNested]
  zones: [ZoneUpdateNested]
  maxAmp: Float
}

input CableUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  codeNew: String
  codeOld: String
  description: String
  patchPanelPort: String
  nrWires: Int
  peripherals: [DevicePeripheralUpdateNested]
  maxAmp: Float
}

type CacheResult {
  cacheName: String!
  cacheKey: String!
  cachedValue: String
}

type Configuration {
  id: Long
  version: Long
  name: String
  description: String
  value: String
  entityType: EntityType
  key: String
  entityId: Long

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input ConfigurationCreate {
  name: String
  description: String
  value: String!
  entityType: EntityType!
  key: String!
  entityId: Long!
}

input ConfigurationCreateNested {
  id: Long
  name: String
  description: String
  value: String
  entityType: EntityType
  key: String
  entityId: Long
}

type ConfigurationDeleteByIdResult {
  error: String
  success: Boolean
}

type ConfigurationDeleteByKeyResult {
  error: String
  success: Boolean
}

input ConfigurationUpdate {
  version: Long
  name: String
  description: String
  value: String
  entityType: EntityType
  key: String
  entityId: Long
}

input ConfigurationUpdateNested {
  id: Long
  name: String
  description: String
  value: String
  entityType: EntityType
  key: String
  entityId: Long
}

type CronTrigger {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  expression: String
  job: Job

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input CronTriggerCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  expression: String
}

input CronTriggerUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  expression: String
}

"""
Built-in Date
"""
scalar Date

type DeleteResponseCustom {
  error: String
  success: Boolean
}

"""
Whether or not the operation was successful
"""
type DeleteResult {
  success: Boolean!
  error: String
}

type Device {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  name: String
  model: DeviceModel
  description: String
  networkAddress: NetworkAddressEmbedded
  offlineScenario: String
  rack: Rack
  type: DeviceCategory
  status: DeviceStatus
  zones: [Zone]
  authAccounts: [DeviceAccount]
  backups: [DeviceBackup]
  ports: [DevicePort]
  configurations: [Configuration]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

type DeviceAccount {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  username: String
  password: String
  isDefault: Boolean
  device: Device

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input DeviceAccountCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  username: String
  password: String
  isDefault: Boolean
  device: DeviceCreateNested!
}

input DeviceAccountCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  username: String
  password: String
  isDefault: Boolean
}

input DeviceAccountUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  username: String
  password: String
  isDefault: Boolean
  device: DeviceUpdateNested
}

input DeviceAccountUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  username: String
  password: String
  isDefault: Boolean
}

type DeviceBackup {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  firmware: ByteArray
  configuration: String
  device: Device
  frmVersion: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input DeviceBackupCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  firmware: ByteArray
  configuration: String
  frmVersion: String
}

input DeviceBackupUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  firmware: ByteArray
  configuration: String
  frmVersion: String
}

type DeviceCategory {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input DeviceCategoryCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String!
}

input DeviceCategoryCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
}

input DeviceCategoryUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
}

input DeviceCategoryUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
}

input DeviceCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String!
  name: String
  model: DeviceModel
  description: String
  networkAddress: NetworkAddressCreateEmbedded
  offlineScenario: String
  rack: RackCreateNested
  type: DeviceCategoryCreateNested
  status: DeviceStatus
  zones: [ZoneCreateNested!]
  authAccounts: [DeviceAccountCreateNested!]
  backups: [DeviceBackupCreateNested!]
  ports: [DevicePortCreateNested!]
}

input DeviceCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  name: String
  model: DeviceModel
  description: String
  networkAddress: NetworkAddressCreateEmbedded
  offlineScenario: String
  type: DeviceCategoryCreateNested
  status: DeviceStatus
  authAccounts: [DeviceAccountCreateNested]
  backups: [DeviceBackupCreateNested]
  ports: [DevicePortCreateNested]
}

enum DeviceModel {
  MEGAD_2561_RTC
  ESP8266_1
  TMEZON_INTERCOM
  NIBE_F1145_8_EM
  ELECTRIC_METER_DTS
  CAM_ONVIF
}

type DevicePeripheral {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  model: String
  description: String
  maxAmp: Float
  connectedTo: [DevicePort]
  zones: [Zone]
  category: PeripheralCategory
  accessTokens: [PeripheralAccessToken]
  configurations: [Configuration]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input DevicePeripheralCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String!
  model: String
  description: String
  maxAmp: Float
  connectedTo: [DevicePortCreateNested!]
  zones: [ZoneCreateNested!]
  category: PeripheralCategoryCreateNested!
  accessTokens: [PeripheralAccessTokenCreateNested!]
}

input DevicePeripheralCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  model: String
  description: String
  maxAmp: Float
  accessTokens: [PeripheralAccessTokenCreateNested]
}

input DevicePeripheralUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  model: String
  description: String
  maxAmp: Float
  connectedTo: [DevicePortUpdateNested]
  zones: [ZoneUpdateNested]
  category: PeripheralCategoryUpdateNested
  accessTokens: [PeripheralAccessTokenUpdateNested]
}

input DevicePeripheralUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  model: String
  description: String
  maxAmp: Float
  accessTokens: [PeripheralAccessTokenUpdateNested]
}

type DevicePeripheralUpdateResult {
  error: String
  success: Boolean
}

type DevicePort {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  internalRef: String
  name: String
  type: PortType
  state: PortState
  description: String
  value: String
  peripherals: [DevicePeripheral]
  cables: [Cable]
  scenarios: [Scenario]
  subscriptions: [EventSubscription]
  device: Device
  configurations: [Configuration]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input DevicePortCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  internalRef: String!
  name: String
  type: PortType
  state: PortState
  description: String
  value: String
  peripherals: [DevicePeripheralCreateNested!]
  cables: [CableCreateNested!]
  scenarios: [ScenarioCreateNested!]
  subscriptions: [EventSubscriptionCreateNested!]
  device: DeviceCreateNested!
}

input DevicePortCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  internalRef: String
  name: String
  type: PortType
  state: PortState
  description: String
  value: String
  peripherals: [DevicePeripheralCreateNested]
  scenarios: [ScenarioCreateNested]
  subscriptions: [EventSubscriptionCreateNested]
}

input DevicePortUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  internalRef: String
  name: String
  type: PortType
  state: PortState
  description: String
  value: String
  peripherals: [DevicePeripheralUpdateNested]
  cables: [CableUpdateNested]
  scenarios: [ScenarioUpdateNested]
  subscriptions: [EventSubscriptionUpdateNested]
  device: DeviceUpdateNested
}

input DevicePortUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  internalRef: String
  name: String
  type: PortType
  state: PortState
  description: String
  value: String
  peripherals: [DevicePeripheralUpdateNested]
  scenarios: [ScenarioUpdateNested]
  subscriptions: [EventSubscriptionUpdateNested]
}

enum DeviceStatus {
  ONLINE
  OFFLINE
}

input DeviceUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  name: String
  model: DeviceModel
  description: String
  networkAddress: NetworkAddressUpdateEmbedded
  offlineScenario: String
  rack: RackUpdateNested
  type: DeviceCategoryUpdateNested
  status: DeviceStatus
  zones: [ZoneUpdateNested]
  authAccounts: [DeviceAccountUpdateNested]
  backups: [DeviceBackupUpdateNested]
  ports: [DevicePortUpdateNested]
}

input DeviceUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  code: String
  name: String
  model: DeviceModel
  description: String
  networkAddress: NetworkAddressUpdateEmbedded
  offlineScenario: String
  type: DeviceCategoryUpdateNested
  status: DeviceStatus
  authAccounts: [DeviceAccountUpdateNested]
  backups: [DeviceBackupUpdateNested]
  ports: [DevicePortUpdateNested]
}

enum EntityType {
  CABLE
  CABLE_CATEGORY
  DEVICE
  PERIPHERAL
  PERIPHERAL_CATEGORY
  ZONE
  RACK
  EVENT_DATA
  PATCH_PANEL
  PORT
  CONFIG
  PORT_VALUE
  TS_STATISTIC
}

"""
Validation Errors
"""
type Error {
  field: String!
  message: String
}

input EventDatInput {
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
}

type EventData {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  category: String
  p4: String
  p5: String
  p6: String
  p2: String
  p3: String
  p1: String
  p0: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input EventDataCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  category: String
  p4: String
  p5: String
  p6: String
  p2: String!
  p3: String!
  p1: String!
  p0: String!
}

input EventDataCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  category: String
  p4: String
  p5: String
  p6: String
  p2: String
  p3: String
  p1: String
  p0: String
}

type EventDataResponse {
  id: Long
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  uid: String
}

input EventDataUpdate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  category: String
  p4: String
  p5: String
  p6: String
  p2: String
  p3: String
  p1: String
  p0: String
}

input EventDataUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  category: String
  p4: String
  p5: String
  p6: String
  p2: String
  p3: String
  p1: String
  p0: String
}

type EventDefinition {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  hasPublisher: Boolean
  name: String
  hasSubscriber: Boolean

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input EventDefinitionCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  hasPublisher: Boolean
  name: String
  hasSubscriber: Boolean
}

input EventDefinitionUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  hasPublisher: Boolean
  name: String
  hasSubscriber: Boolean
}

type EventSubscription {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinition]
  scenario: Scenario
  pubPort: DevicePort

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input EventSubscriptionCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinitionCreateNested]
  scenario: ScenarioCreateNested
}

input EventSubscriptionUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinitionUpdateNested]
  scenario: ScenarioUpdateNested
}

type EventTrigger {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinition]
  job: Job

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input EventTriggerCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinitionCreateNested]
}

input EventTriggerUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  events: [EventDefinitionUpdateNested]
}

type Job {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  tags: [JobTag]
  cronTriggers: [CronTrigger]
  state: JobState
  eventTriggers: [EventTrigger]
  name: String
  scenario: Scenario
  description: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input JobCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  tags: [JobTagCreateNested]
  cronTriggers: [CronTriggerCreateNested]
  state: JobState
  eventTriggers: [EventTriggerCreateNested]
  name: String
  scenario: ScenarioCreateNested
  description: String
}

enum JobState {
  DRAFT
  ACTIVE
  DISABLED
}

type JobTag {
  id: Long
  version: Long
  name: String
  jobs: [Job]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input JobTagCreateNested {
  id: Long
  name: String
}

input JobTagUpdateNested {
  id: Long
  name: String
}

input JobUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  tags: [JobTagUpdateNested]
  cronTriggers: [CronTriggerUpdateNested]
  state: JobState
  eventTriggers: [EventTriggerUpdateNested]
  name: String
  scenario: ScenarioUpdateNested
  description: String
}

type Layer {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  peripherals: [DevicePeripheral]
  name: String
  description: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input LayerCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  peripherals: [DevicePeripheralCreateNested!]
  name: String!
  description: String!
}

input LayerUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  peripherals: [DevicePeripheralUpdateNested]
  name: String
  description: String
}

"""
Long type
"""
scalar Long

type Mutation {
  roleCreate(role: RoleCreate): Role
  roleUpdate(id: Long!, role: RoleUpdate): Role
  roleDelete(id: Long!): DeleteResult
  peripheralCategoryCreate(
    peripheralCategory: PeripheralCategoryCreate
  ): PeripheralCategory
  peripheralCategoryUpdate(
    id: Long!
    peripheralCategory: PeripheralCategoryUpdate
  ): PeripheralCategory
  peripheralCategoryDelete(id: Long!): DeleteResult
  timeSeriesStatisticCreate(
    timeSeriesStatistic: TimeSeriesStatisticCreate
  ): TimeSeriesStatistic
  timeSeriesStatisticUpdate(
    id: Long!
    timeSeriesStatistic: TimeSeriesStatisticUpdate
  ): TimeSeriesStatistic
  timeSeriesStatisticDelete(id: Long!): DeleteResult
  portValueCreate(portValue: PortValueCreate): PortValue
  portValueUpdate(id: Long!, portValue: PortValueUpdate): PortValue
  portValueDelete(id: Long!): DeleteResult
  devicePortCreate(devicePort: DevicePortCreate): DevicePort
  devicePortUpdate(id: Long!, devicePort: DevicePortUpdate): DevicePort
  devicePortDelete(id: Long!): DeleteResult
  updatePort(id: Long!, port: DevicePortUpdate!): DevicePort
  deviceCreate(device: DeviceCreate): Device
  deviceUpdate(id: Long!, device: DeviceUpdate): Device
  deviceDelete(id: Long!): DeleteResult
  devicePeripheralCreate(
    devicePeripheral: DevicePeripheralCreate
  ): DevicePeripheral
  devicePeripheralUpdate(
    id: Long!
    devicePeripheral: DevicePeripheralUpdate
  ): DevicePeripheral
  devicePeripheralDelete(id: Long!): DeleteResult
  updatePeripheral(
    id: Long!
    peripheral: DevicePeripheralUpdate!
  ): DevicePeripheralUpdateResult
  deviceCategoryCreate(deviceCategory: DeviceCategoryCreate): DeviceCategory
  deviceCategoryUpdate(
    id: Long!
    deviceCategory: DeviceCategoryUpdate
  ): DeviceCategory
  deviceCategoryDelete(id: Long!): DeleteResult
  patchPanelCreate(patchPanel: PatchPanelCreate): PatchPanel
  patchPanelUpdate(id: Long!, patchPanel: PatchPanelUpdate): PatchPanel
  patchPanelDelete(id: Long!): DeleteResult
  layerCreate(layer: LayerCreate): Layer
  layerUpdate(id: Long!, layer: LayerUpdate): Layer
  layerDelete(id: Long!): DeleteResult
  scenarioCreate(scenario: ScenarioCreate): Scenario
  scenarioUpdate(id: Long!, scenario: ScenarioUpdate): Scenario
  scenarioDelete(id: Long!): DeleteResult
  zoneCreate(zone: ZoneCreate): Zone
  zoneUpdate(id: Long!, zone: ZoneUpdate): Zone
  zoneDelete(id: Long!): DeleteResult
  eventDataCreate(eventData: EventDataCreate): EventData
  eventDataUpdate(id: Long!, eventData: EventDataUpdate): EventData
  eventDataDelete(id: Long!): DeleteResult
  deviceAccountCreate(deviceAccount: DeviceAccountCreate): DeviceAccount
  deviceAccountUpdate(
    id: Long!
    deviceAccount: DeviceAccountUpdate
  ): DeviceAccount
  deviceAccountDelete(id: Long!): DeleteResult
  rackCreate(rack: RackCreate): Rack
  rackUpdate(id: Long!, rack: RackUpdate): Rack
  rackDelete(id: Long!): DeleteResult
  userCreate(user: UserCreate): User
  userUpdate(id: Long!, user: UserUpdate): User
  userDelete(id: Long!): DeleteResult
  userDeleteCascade(id: Long!): DeleteResponseCustom
  cableCategoryCreate(cableCategory: CableCategoryCreate): CableCategory
  cableCategoryUpdate(
    id: Long!
    cableCategory: CableCategoryUpdate
  ): CableCategory
  cableCategoryDelete(id: Long!): DeleteResult
  configurationCreate(configuration: ConfigurationCreate): Configuration
  configurationUpdate(
    id: Long!
    configuration: ConfigurationUpdate
  ): Configuration
  configurationDelete(id: Long!): DeleteResult
  removeConfig(id: Long!): ConfigurationDeleteByIdResult
  configDeleteByKey(
    key: String!
    entityId: Long!
    entityType: EntityType!
  ): ConfigurationDeleteByKeyResult
  savePropertyValue(
    key: String!
    entityId: Long!
    entityType: EntityType!
    value: String!
  ): Configuration
  addListItemProperty(
    key: String!
    entityId: Long!
    entityType: EntityType!
    value: String!
  ): Configuration
  cableCreate(cable: CableCreate): Cable
  cableUpdate(id: Long!, cable: CableUpdate): Cable
  cableDelete(id: Long!): DeleteResult
  updateCable(id: Long!, cable: CableUpdate!): Cable
  pushEvent(input: EventDatInput): EventDataResponse
  cacheDelete(cacheName: String!, cacheKey: String!): MutationResponse
  userRolesSave(input: SaveUserRoles): MutationResponse
}

type MutationResponse {
  success: Boolean
  error: String
}

type Navigation {
  breadcrumb(type: String!, id: String!): [BradCrumbLink]
}

input NetworkAddressCreateEmbedded {
  gateway: String
  port: String!
  ip: String!
}

type NetworkAddressEmbedded {
  gateway: String
  port: String
  ip: String
}

input NetworkAddressUpdateEmbedded {
  gateway: String
  port: String
  ip: String
}

type PatchPanel {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  size: Int
  rack: Rack
  cables: [Cable]
  name: String
  description: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input PatchPanelCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  size: Int
  rack: RackCreateNested!
  cables: [CableCreateNested!]
  name: String!
  description: String!
}

input PatchPanelCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  size: Int
  cables: [CableCreateNested]
  name: String
  description: String
}

input PatchPanelUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  size: Int
  rack: RackUpdateNested
  cables: [CableUpdateNested]
  name: String
  description: String
}

input PatchPanelUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  size: Int
  cables: [CableUpdateNested]
  name: String
  description: String
}

type PeripheralAccessToken {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  user: User
  peripheral: DevicePeripheral
  token: String
  tsExpiration: Date

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input PeripheralAccessTokenCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  token: String
  tsExpiration: Date
}

input PeripheralAccessTokenUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  token: String
  tsExpiration: Date
}

type PeripheralCategory {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  title: String
  cables: [Cable]
  peripherals: [DevicePeripheral]
  name: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input PeripheralCategoryCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  title: String
  cables: [CableCreateNested!]
  peripherals: [DevicePeripheralCreateNested!]
  name: String!
}

input PeripheralCategoryCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  title: String
  cables: [CableCreateNested]
  peripherals: [DevicePeripheralCreateNested]
  name: String
}

input PeripheralCategoryUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  title: String
  cables: [CableUpdateNested]
  peripherals: [DevicePeripheralUpdateNested]
  name: String
}

input PeripheralCategoryUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  title: String
  cables: [CableUpdateNested]
  peripherals: [DevicePeripheralUpdateNested]
  name: String
}

enum PortState {
  UNKNOW
  CONFIGURED
  ACTIVE
  INACTIVE
}

enum PortType {
  UNKNOW
  IN
  OUT
  ADC
  DSEN
  I2C
  SWITCH
  BINARY_SENSOR
  SENSOR
  NOT_CONFIGURED
}

type PortValue {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  event: EventData
  portId: Long
  portUid: String
  value: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input PortValueCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  event: EventDataCreateNested
  portId: Long
  portUid: String!
  value: String!
}

input PortValueUpdate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  event: EventDataUpdateNested
  portId: Long
  portUid: String
  value: String
}

type Query {
  role(id: Long!): Role
  roleList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Role]
  roleCount: Int
  peripheralCategory(id: Long!): PeripheralCategory
  peripheralCategoryList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [PeripheralCategory]
  peripheralCategoryCount: Int
  timeSeriesStatistic(id: Long!): TimeSeriesStatistic
  timeSeriesStatisticList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [TimeSeriesStatistic]
  timeSeriesStatisticCount: Int
  statLatestByKey(key: String!): TimeSeriesStatistic
  statLatestByKeys(keys: [String!]): [TimeSeriesStatistic]
  portValue(id: Long!): PortValue
  portValueList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [PortValue]
  portValueCount: Int
  devicePort(id: Long!): DevicePort
  devicePortList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [DevicePort]
  devicePortCount: Int
  portTypes: [String]
  portStates: [String]
  device(id: Long!): Device
  deviceList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Device]
  deviceCount: Int
  deviceById(id: String!): Device
  devicePeripheral(id: Long!): DevicePeripheral
  devicePeripheralList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [DevicePeripheral]
  devicePeripheralCount: Int
  devicePeripheralById(id: String!): DevicePeripheral
  deviceCategory(id: Long!): DeviceCategory
  deviceCategoryList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [DeviceCategory]
  deviceCategoryCount: Int
  patchPanel(id: Long!): PatchPanel
  patchPanelList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [PatchPanel]
  patchPanelCount: Int
  layer(id: Long!): Layer
  layerList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Layer]
  layerCount: Int
  scenario(id: Long!): Scenario
  scenarioList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Scenario]
  scenarioCount: Int
  zone(id: Long!): Zone
  zoneList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Zone]
  zoneCount: Int
  zoneById(id: String!): Zone
  zonesByParentId(id: String!): [Zone]
  zonesRoot: [Zone]
  eventData(id: Long!): EventData
  eventDataList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [EventData]
  eventDataCount: Int
  eventsByP2(p2: String!, count: Int!, offset: Int!): [EventData]
  deviceAccount(id: Long!): DeviceAccount
  deviceAccountList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [DeviceAccount]
  deviceAccountCount: Int
  rack(id: Long!): Rack
  rackList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Rack]
  rackCount: Int
  user(id: Long!): User
  userList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [User]
  userCount: Int
  userById(id: String!): User
  cableCategory(id: Long!): CableCategory
  cableCategoryList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [CableCategory]
  cableCategoryCount: Int
  configuration(id: Long!): Configuration
  configurationList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Configuration]
  configurationCount: Int
  configurationListByEntity(
    entityType: EntityType!
    entityId: Long!
  ): [Configuration]
  configPropertyByKey(
    key: String!
    entityId: Long!
    entityType: EntityType!
  ): Configuration
  configListByKey(
    key: String!
    entityId: Long!
    entityType: EntityType!
  ): [Configuration]
  configKeysByEntity(entityType: EntityType!): [String]
  cable(id: Long!): Cable
  cableList(
    max: Int
    offset: Int
    sort: String
    order: String
    ignoreCase: Boolean
  ): [Cable]
  cableCount: Int
  cableById(id: String!): Cable
  navigation: Navigation
  userRolesForUser(userId: String!): [UserRole]
  cache(cacheName: String!, cacheKey: String!): CacheResult
  cacheAll(cacheName: String): [CacheResult]
  config(key: String!): String
}

type Rack {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  zone: Zone
  name: String
  description: String
  devices: [Device]
  patchPanels: [PatchPanel]
  cables: [Cable]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input RackCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  zone: ZoneCreateNested
  name: String
  description: String
  devices: [DeviceCreateNested!]
  patchPanels: [PatchPanelCreateNested!]
  cables: [CableCreateNested!]
}

input RackCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  zone: ZoneCreateNested
  name: String
  description: String
  devices: [DeviceCreateNested]
  patchPanels: [PatchPanelCreateNested]
  cables: [CableCreateNested]
}

input RackUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  zone: ZoneUpdateNested
  name: String
  description: String
  devices: [DeviceUpdateNested]
  patchPanels: [PatchPanelUpdateNested]
  cables: [CableUpdateNested]
}

input RackUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  zone: ZoneUpdateNested
  name: String
  description: String
  devices: [DeviceUpdateNested]
  patchPanels: [PatchPanelUpdateNested]
  cables: [CableUpdateNested]
}

type Role {
  id: Long
  version: Long
  authority: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input RoleCreate {
  authority: String!
}

input RoleUpdate {
  version: Long
  authority: String
}

input SaveUserRoles {
  userId: String!
  userRoles: [UserRoleRef]
}

type Scenario {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  body: String
  ports: [DevicePort]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input ScenarioCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  body: String!
  ports: [DevicePortCreateNested!]
}

input ScenarioCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  body: String
}

input ScenarioUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  body: String
  ports: [DevicePortUpdateNested]
}

input ScenarioUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  name: String
  body: String
}

type TimeSeriesStatistic {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  deltaDiff: Float
  value: Float
  key: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input TimeSeriesStatisticCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  deltaDiff: Float
  value: Float!
  key: String!
}

input TimeSeriesStatisticUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  deltaDiff: Float
  value: Float
  key: String
}

type User {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  password: String
  username: String
  firstName: String
  lastName: String
  email: String
  phoneNr: String
  passwordExpired: Boolean
  peripheralAccessTokens: [PeripheralAccessToken]
  accountExpired: Boolean
  favJobs: [Job]
  accountLocked: Boolean
  enabled: Boolean
  name: String

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input UserCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  password: String!
  username: String!
  firstName: String
  lastName: String
  email: String
  phoneNr: String
  passwordExpired: Boolean!
  peripheralAccessTokens: [PeripheralAccessTokenCreateNested!]
  accountExpired: Boolean!
  favJobs: [JobCreateNested!]
  accountLocked: Boolean!
  enabled: Boolean!
}

type UserRole {
  userId: ID!
  roleId: ID!
}

input UserRoleRef {
  userId: ID!
  roleId: ID!
}

input UserUpdate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  password: String
  username: String
  firstName: String
  lastName: String
  email: String
  phoneNr: String
  passwordExpired: Boolean
  peripheralAccessTokens: [PeripheralAccessTokenUpdateNested]
  accountExpired: Boolean
  favJobs: [JobUpdateNested]
  accountLocked: Boolean
  enabled: Boolean
}

type Zone {
  id: Long
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  devices: [Device]
  peripherals: [DevicePeripheral]
  cables: [Cable]
  zones: [Zone]
  categories: [String]
  name: String
  description: String
  parent: Zone
  configurations: [Configuration]

  """
  A list of validation errors on the entity
  """
  errors: [Error]
}

input ZoneCreate {
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  devices: [DeviceCreateNested!]
  peripherals: [DevicePeripheralCreateNested!]
  cables: [CableCreateNested!]
  zones: [ZoneCreateNested!]
  categories: [String!]
  name: String!
  description: String!
  parent: ZoneCreateNested!
  configurations: [ConfigurationCreate]
}

input ZoneCreateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  peripherals: [DevicePeripheralCreateNested]
  zones: [ZoneCreateNested]
  categories: [String]
  name: String
  description: String
  configurations: [ConfigurationCreateNested]
}

input ZoneUpdate {
  version: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  devices: [DeviceUpdateNested]
  peripherals: [DevicePeripheralUpdateNested]
  cables: [CableUpdateNested]
  zones: [ZoneUpdateNested]
  categories: [String]
  name: String
  description: String
  parent: ZoneUpdateNested
  configurations: [ConfigurationUpdate]
}

input ZoneUpdateNested {
  id: Long
  uid: String
  tsCreated: Date
  tsUpdated: Date
  entityType: EntityType
  peripherals: [DevicePeripheralUpdateNested]
  zones: [ZoneUpdateNested]
  categories: [String]
  name: String
  description: String
  configurations: [ConfigurationUpdateNested]
}
