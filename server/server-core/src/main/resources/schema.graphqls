type Query{
    navigation : Navigation
    userRolesForUser(userUid: String!): [UserRole]
}

type UserRole {
    userId: ID!
    roleId: ID!
}

type Navigation {
    breadcrumb(zoneUid: String) : [BradCrumbLink]
}

type MutationResponse {
    success : Boolean
    error : String
}

type BradCrumbLink {
    name : String
    zoneUid : String
}
type Mutation {
    pushEvent(input:EventDatInput) : EventDataResponse
    userRolesSave(input: SaveUserRoles): MutationResponse
}

type EventDataResponse {
    id: Long
    p0: String
    p1: String
    p2: String
    p3: String
    p4: String
    p5: String
    p6: String
    uid: String
}

input EventDatInput {
    p0: String
    p1: String
    p2: String
    p3: String
    p4: String
    p5: String
    p6: String
}

input SaveUserRoles {
    userUid: String!
    userRoles: [UserRoleRef]
}
input UserRoleRef {
    userId : ID!
    roleId: ID!
}