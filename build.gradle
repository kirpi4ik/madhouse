buildscript {
    repositories {
        maven {
            url "http://nexus.devexpert.eu/repository/maven"
            credentials {
                username = 'docker'
                if (file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").exists()) {
                    password = file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").text
                } else {
                    password = "${System.env.NEXUS_DEVEXPERT_EU_PASSWORD}"
                }
            }
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
        classpath 'commons-io:commons-io:2.6'
    }
}
plugins {
    id "com.bmuschko.docker-remote-api" version "6.6.1"
    id 'java-library'
}
group "eu.devexpert.madhouse"

//tag::extVariables[]
ext {
    projectName = 'madhousev2-web'
    isGrailsPlugin = name.startsWith('grails-plugin')
    isBuildSnapshot = projectVersion.toString().endsWith("-SNAPSHOT")
    commonBuild = new File(project.rootDir, "gradle").absolutePath
    dockerBuildDir = mkdir("${buildDir}/docker")
    dockerBuildGroup = 'Docker'
    dockerRegistry = 'nexus.devexpert.eu:8888'
    dockerRepo = 'madhousev2-web'
    dockerTag = "${dockerRepo}:${projectVersion}" // <1>
}

//end::extVariables[]
//tag::prepareDocker[]
docker {
//    url = 'http://localhost:2375'
//    certPath = new File(System.properties['user.home'], '.boot2docker/certs/boot2docker-vm')
    registryCredentials {
        url = 'http://nexus.devexpert.eu:8888/v1/'
        username = 'docker'
        if (file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").exists()) {
            password = file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").text
        } else {
            password = "${System.env.NEXUS_DEVEXPERT_EU_PASSWORD}"
        }
    }
}
//tag::prepareDocker[]

subprojects { project ->
    version projectVersion
    group "eu.devexpert.madhouse"
    ext {
        isGrailsPlugin = name.startsWith('grails-plugin')
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

    }
    repositories {
        maven {
            url "http://nexus.devexpert.eu/repository/maven"
            credentials {
                username = 'docker'
                if (file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").exists()) {
                    password = file("${System.properties['user.home']}/.docker/nexus.devexpert.eu.password").text
                } else {
                    password = "${System.env.NEXUS_DEVEXPERT_EU_PASSWORD}"
                }
            }
        }
    }
}

task copyClientResources(dependsOn: ':web-vue:build') { // <1>
    group = 'build'
    description = 'Copy client resources into server'
}

task assembleServerAndClient(dependsOn: ['copyClientResources', ':server-core:assemble']) { // <2>
    group = 'build'
    description = 'Build combined server & web-vue JAR/WAR'

    doLast {
        copy {
            from fileTree(dir: "${project(':server-core').buildDir}/libs/") // <3>
            into "${buildDir}"

            rename '(.+)', "${projectName}-${projectVersion}.jar"
        }

        logger.quiet "JAR/WAR generated at $rootDir/build/. It combines the server and web-vue projects."
    }
}

copyClientResources.doFirst { // <4>
    copy {
        from "${project(':web-vue').projectDir}/dist"
        into "${project(':server-core').buildDir}/resources/main/public"
    }
}
//tag::import[]
import com.bmuschko.gradle.docker.tasks.image.*

//end::import[]

task versionTxt() {
    doLast {
        new File("${projectDir}/src/main/docker", "version.txt").text = "${projectVersion}"
    }
}
task prepareDocker(type: Copy, dependsOn: assembleServerAndClient) { // <3>
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = dockerBuildGroup
    into dockerBuildDir
    into(".") {
        from 'src/main/docker'
        from "${buildDir}/${projectName}-${projectVersion}.jar"
    }

    eachFile { logger.quiet("## ${it.file.absolutePath}") }
}
//end::prepareDocker[]

//tag::createDockerfile[]
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) { // <4>
    description = 'Create a Dockerfile file'
    group = dockerBuildGroup

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:8u151-jdk-alpine'

    exposePort 8181
    environmentVariable 'GRAILS_ENV', 'production'
    // Create a config directory and expose as volume.
    // External configuration files in this volume are automatically
    // picked up.
    runCommand 'mkdir -p /app/config'
    volume '/app/config'
    workingDir '/app'

    copyFile "${projectName}-${projectVersion}.jar", 'madhouse.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh' // <5>
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh' // <5>
}
//end::createDockerfile[]

//tag::buildImage[]
task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) { // <6>
    description = 'Create Docker image to run the Grails application'
    group = dockerBuildGroup

    inputDir = file(dockerBuildDir)
    images.add(dockerTag)
}
task tagImage(type: DockerTagImage, dependsOn: buildImage) {
    description "Tag custom docker image."
    group = dockerBuildGroup
    targetImageId buildImage.getImageId()
    repository = "${dockerRegistry}/${dockerRepo}".toString()
    tag = "${projectVersion}"
}

task pushImage(type: DockerPushImage, dependsOn: tagImage) {
    group = dockerBuildGroup
    description "Push custom docker image."

    images.add("${dockerRegistry}/${dockerTag}".toString())
}
//end::buildImage[]
task removeImage(type: DockerRemoveImage) {
    description = 'Remove Docker image with Grails application.'
    group = dockerBuildGroup
    targetImageId { dockerTag }
}
apply from: "${commonBuild}/common-publishing.gradle"